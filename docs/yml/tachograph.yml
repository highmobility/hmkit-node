title: Tachograph
content:
    -
        title: 'getState([, propertyNames])'
        id: getState
        children:
            -
                declaration: "```javascript\nhmkit.commands.Tachograph.getState()\n```"
                parameters:
                    propertyNames: '(optional) Array of names of the properties you want returned.'
                returns: TachographResponse
                example: "```javascript\nhmkit.telematics.sendCommand(\n  hmkit.commands.Tachograph.getState(),\n  accessCertificate\n);\n```"
            -
                id: TachographResponse
                title: TachographResponse
                parameters:
                    driversWorkingStates:
                        data.value: '(Array<Object>) '
                        timestamp: (Date)
                    driversTimeStates:
                        data.value: '(Array<Object>) '
                        timestamp: (Date)
                    driversCardsPresent:
                        data.value: '(Array<Object>) '
                        timestamp: (Date)
                    vehicleMotion:
                        data.value: '(String) (enum) '
                        timestamp: (Date)
                    vehicleOverspeed:
                        data.value: '(String) (enum) '
                        timestamp: (Date)
                    vehicleDirection:
                        data.value: '(String) (enum) '
                        timestamp: (Date)
                    vehicleSpeed:
                        data.value: '(Number) (speed) The tachograph vehicle speed'
                        timestamp: (Date)
                example: "```json\n{\n  \"driversWorkingStates\": [\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"driverNumber\": {\n            \"value\": 1\n          },\n          \"workingState\": {\n            \"value\": \"working\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"driverNumber\": {\n            \"value\": 2\n          },\n          \"workingState\": {\n            \"value\": \"resting\"\n          }\n        }\n      }\n    }\n  ],\n  \"driversTimeStates\": [\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"driverNumber\": {\n            \"value\": 3\n          },\n          \"timeState\": {\n            \"value\": \"four_reached\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"driverNumber\": {\n            \"value\": 4\n          },\n          \"timeState\": {\n            \"value\": \"fifteen_min_before_sixteen\"\n          }\n        }\n      }\n    }\n  ],\n  \"driversCardsPresent\": [\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"driverNumber\": {\n            \"value\": 6\n          },\n          \"cardPresent\": {\n            \"value\": \"present\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"driverNumber\": {\n            \"value\": 7\n          },\n          \"cardPresent\": {\n            \"value\": \"not_present\"\n          }\n        }\n      }\n    }\n  ],\n  \"vehicleMotion\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"detected\"\n      }\n    }\n  },\n  \"vehicleOverspeed\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"no_overspeed\"\n      }\n    }\n  },\n  \"vehicleDirection\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"forward\"\n      }\n    }\n  },\n  \"vehicleSpeed\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 80,\n        \"unit\": \"kilometers_per_hour\"\n      }\n    }\n  }\n}\n```"
    -
        title: 'getAvailability([, propertyNames])'
        id: get-availability
        children:
            -
                declaration: "```javascript\nhmkit.commands.Tachograph.getAvailability()\n```"
                parameters:
                    propertyNames: '(optional) Array of names of the properties you want returned.'
                example: "```javascript\n// Get availability for all properties\nhmkit.telematics.sendCommand(\n  hmkit.commands.Tachograph.getAvailability(),\n  accessCertificate\n);\n// Get availability for specific properties\nhmkit.telematics.sendCommand(\n  hmkit.commands.Tachograph.getAvailability(['drivers_working_states']),\n  accessCertificate\n);\n```"
            -
                id: availability-response
                title: Response
                parameters:
                    availability:
                        updateRate.value: '(String) enum'
                        rateLimit.value: (Number)
                        rateLimit.unit: (String)
                        appliesPer.value: (String)
                discussion: 'The response contains an availability object for each property, as shown in the example'
                example: "```json\n{\n  \"drivers_working_states\": {\n    \"availability\": {\n      \"updateRate\": {\n        \"value\": \"trip_high\"\n      },\n      \"rateLimit\": {\n        \"value\": 64,\n        \"unit\": \"hertz\"\n      },\n      \"appliesPer\": {\n        \"value\": \"vehicle\"\n      }\n    }\n  }\n}\n```"
