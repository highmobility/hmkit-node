title: Usage
content:
    -
        title: 'getUsage([, propertyNames])'
        id: getUsage
        children:
            -
                declaration: "```javascript\nhmkit.commands.Usage.getUsage()\n```"
                parameters:
                    propertyNames: '(optional) Array of names of the properties you want returned.'
                returns: UsageResponse
                example: "```javascript\nhmkit.telematics.sendCommand(\n  hmkit.commands.Usage.getUsage(),\n  accessCertificate\n);\n```"
            -
                id: UsageResponse
                title: UsageResponse
                parameters:
                    averageWeeklyDistance:
                        data.value: '(Number) (length) Average weekly distance'
                        timestamp: (Date)
                    averageWeeklyDistanceLongRun:
                        data.value: '(Number) (length) Average weekyl distance over long term'
                        timestamp: (Date)
                    accelerationEvaluation:
                        data.value: '(Number) (double) Acceleration evaluation percentage'
                        timestamp: (Date)
                    drivingStyleEvaluation:
                        data.value: '(Number) (double) Driving style evaluation percentage'
                        timestamp: (Date)
                    drivingModesActivationPeriods:
                        data.value: '(Array<Object>) '
                        timestamp: (Date)
                    drivingModesEnergyConsumptions:
                        data.value: '(Array<Object>) '
                        timestamp: (Date)
                    lastTripEnergyConsumption:
                        data.value: '(Number) (energy) Energy consumption in the last trip'
                        timestamp: (Date)
                    lastTripFuelConsumption:
                        data.value: '(Number) (volume) Fuel consumption in the last trip'
                        timestamp: (Date)
                    mileageAfterLastTrip:
                        data.value: '(Number) (length) Mileage after the last trip'
                        timestamp: (Date)
                    lastTripElectricPortion:
                        data.value: '(Number) (double) Portion of the last trip used in electric mode'
                        timestamp: (Date)
                    lastTripAverageEnergyRecuperation:
                        data.value: '(Number) (energy_efficiency) Energy recuperation rate for last trip'
                        timestamp: (Date)
                    lastTripBatteryRemaining:
                        data.value: '(Number) (double) Battery % remaining after last trip'
                        timestamp: (Date)
                    lastTripDate:
                        data.value: '(Date) (timestamp) The last trip date'
                        timestamp: (Date)
                    averageFuelConsumption:
                        data.value: '(Number) (fuel_efficiency) Average fuel consumption for current trip'
                        timestamp: (Date)
                    currentFuelConsumption:
                        data.value: '(Number) (fuel_efficiency) Current fuel consumption'
                        timestamp: (Date)
                    odometerAfterLastTrip:
                        data.value: '(Number) (length) Odometer after the last trip'
                        timestamp: (Date)
                    safetyDrivingScore:
                        data.value: '(Number) (double) Safety driving score as percentage'
                        timestamp: (Date)
                    rapidAccelerationGrade:
                        data.value: '(String) (enum) Grade given for rapid acceleration over time'
                        timestamp: (Date)
                    rapidDecelerationGrade:
                        data.value: '(String) (enum) Grade given for rapid deceleration over time'
                        timestamp: (Date)
                    lateNightGrade:
                        data.value: '(String) (enum) Grade given for late night driving over time'
                        timestamp: (Date)
                    distanceOverTime:
                        data.value: '(Object) Distance driven over a given time period'
                        timestamp: (Date)
                    electricConsumptionRateSinceStart:
                        data.value: '(Number) (energy_efficiency) Electric energy consumption rate since the start of a trip'
                        timestamp: (Date)
                    electricConsumptionRateSinceReset:
                        data.value: '(Number) (energy_efficiency) Electric energy consumption rate since a reset'
                        timestamp: (Date)
                    electricDistanceLastTrip:
                        data.value: '(Number) (length) Distance travelled with electricity in last trip'
                        timestamp: (Date)
                    electricDistanceSinceReset:
                        data.value: '(Number) (length) Distance travelled with electricity since reset'
                        timestamp: (Date)
                    electricDurationLastTrip:
                        data.value: '(Number) (duration) Duration of travelling using electricity during last trip'
                        timestamp: (Date)
                    electricDurationSinceReset:
                        data.value: '(Number) (duration) Duration of travelling using electricity since reset'
                        timestamp: (Date)
                    fuelConsumptionRateLastTrip:
                        data.value: '(Number) (fuel_efficiency) Liquid fuel consumption rate during last trip'
                        timestamp: (Date)
                    fuelConsumptionRateSinceReset:
                        data.value: '(Number) (fuel_efficiency) Liquid fuel consumption rate since reset'
                        timestamp: (Date)
                    averageSpeedLastTrip:
                        data.value: '(Number) (speed) Average speed during last trip'
                        timestamp: (Date)
                    averageSpeedSinceReset:
                        data.value: '(Number) (speed) Average speed since reset'
                        timestamp: (Date)
                    fuelDistanceLastTrip:
                        data.value: '(Number) (length) Distance travelled with (liquid) fuel during last trip'
                        timestamp: (Date)
                    fuelDistanceSinceReset:
                        data.value: '(Number) (length) Distance travelled with (liquid) fuel since reset'
                        timestamp: (Date)
                    drivingDurationLastTrip:
                        data.value: '(Number) (duration) Duration of last trip'
                        timestamp: (Date)
                    drivingDurationSinceReset:
                        data.value: '(Number) (duration) Duration of travelling since reset'
                        timestamp: (Date)
                    ecoScoreTotal:
                        data.value: '(Number) (double) Overall eco-score rating'
                        timestamp: (Date)
                    ecoScoreFreeWheel:
                        data.value: '(Number) (double) Eco-score rating for free-wheeling'
                        timestamp: (Date)
                    ecoScoreConstant:
                        data.value: '(Number) (double) Eco-score rating constant'
                        timestamp: (Date)
                    ecoScoreBonusRange:
                        data.value: '(Number) (length) Eco-score bonus range'
                        timestamp: (Date)
                example: "```json\n{\n  \"averageWeeklyDistance\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 666.6,\n        \"unit\": \"kilometers\"\n      }\n    }\n  },\n  \"averageWeeklyDistanceLongRun\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 777.7,\n        \"unit\": \"kilometers\"\n      }\n    }\n  },\n  \"accelerationEvaluation\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7\n      }\n    }\n  },\n  \"drivingStyleEvaluation\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.88\n      }\n    }\n  },\n  \"drivingModesActivationPeriods\": [\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"regular\"\n          },\n          \"period\": {\n            \"value\": 0.2\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"eco\"\n          },\n          \"period\": {\n            \"value\": 0.3\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"sport\"\n          },\n          \"period\": {\n            \"value\": 0.1\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"sport_plus\"\n          },\n          \"period\": {\n            \"value\": 0.1\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"ecoPlus\"\n          },\n          \"period\": {\n            \"value\": 0.3\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"comfort\"\n          },\n          \"period\": {\n            \"value\": 0\n          }\n        }\n      }\n    }\n  ],\n  \"drivingModesEnergyConsumptions\": [\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"regular\"\n          },\n          \"consumption\": {\n            \"value\": 20.2,\n            \"unit\": \"kilowatt_hours\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"eco\"\n          },\n          \"consumption\": {\n            \"value\": 33.2,\n            \"unit\": \"kilowatt_hours\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"sport\"\n          },\n          \"consumption\": {\n            \"value\": 54.3,\n            \"unit\": \"kilowatt_hours\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"sport_plus\"\n          },\n          \"consumption\": {\n            \"value\": 64.8,\n            \"unit\": \"kilowatt_hours\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"ecoPlus\"\n          },\n          \"consumption\": {\n            \"value\": 18,\n            \"unit\": \"kilowatt_hours\"\n          }\n        }\n      }\n    },\n    {\n      \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n      \"data\": {\n        \"value\": {\n          \"drivingMode\": {\n            \"value\": \"comfort\"\n          },\n          \"consumption\": {\n            \"value\": 33.7,\n            \"unit\": \"kilowatt_hours\"\n          }\n        }\n      }\n    }\n  ],\n  \"lastTripEnergyConsumption\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 101.3,\n        \"unit\": \"kilowatt_hours\"\n      }\n    }\n  },\n  \"lastTripFuelConsumption\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 22.5,\n        \"unit\": \"liters\"\n      }\n    }\n  },\n  \"mileageAfterLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 95632,\n        \"unit\": \"kilometers\"\n      }\n    }\n  },\n  \"lastTripElectricPortion\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7\n      }\n    }\n  },\n  \"lastTripAverageEnergyRecuperation\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 5.68,\n        \"unit\": \"kwh_per_100_kilometers\"\n      }\n    }\n  },\n  \"lastTripBatteryRemaining\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.5\n      }\n    }\n  },\n  \"lastTripDate\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"2018-10-17T12:34:58.000Z\"\n      }\n    }\n  },\n  \"averageFuelConsumption\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 6.5,\n        \"unit\": \"liters_per_100_kilometers\"\n      }\n    }\n  },\n  \"currentFuelConsumption\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 7.5,\n        \"unit\": \"liters_per_100_kilometers\"\n      }\n    }\n  },\n  \"odometerAfterLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 95632,\n        \"unit\": \"kilometers\"\n      }\n    }\n  },\n  \"safetyDrivingScore\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7\n      }\n    }\n  },\n  \"rapidAccelerationGrade\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"excellent\"\n      }\n    }\n  },\n  \"rapidDecelerationGrade\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"normal\"\n      }\n    }\n  },\n  \"lateNightGrade\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": \"excellent\"\n      }\n    }\n  },\n  \"distanceOverTime\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"distance\": {\n          \"value\": 1500.88,\n          \"unit\": \"kilometers\"\n        },\n        \"time\": {\n          \"value\": 10,\n          \"unit\": \"weeks\"\n        }\n      }\n    }\n  },\n  \"electricConsumptionRateSinceStart\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 11.22,\n        \"unit\": \"kwh_per_100_kilometers\"\n      }\n    }\n  },\n  \"electricConsumptionRateSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 22.33,\n        \"unit\": \"kwh_per_100_kilometers\"\n      }\n    }\n  },\n  \"electricDistanceLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 111000,\n        \"unit\": \"meters\"\n      }\n    }\n  },\n  \"electricDistanceSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 222000,\n        \"unit\": \"meters\"\n      }\n    }\n  },\n  \"electricDurationLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 77,\n        \"unit\": \"minutes\"\n      }\n    }\n  },\n  \"electricDurationSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 88,\n        \"unit\": \"minutes\"\n      }\n    }\n  },\n  \"fuelConsumptionRateLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 5.4,\n        \"unit\": \"liters_per_100_kilometers\"\n      }\n    }\n  },\n  \"fuelConsumptionRateSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 5.3,\n        \"unit\": \"liters_per_100_kilometers\"\n      }\n    }\n  },\n  \"averageSpeedLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 44.2,\n        \"unit\": \"kilometers_per_hour\"\n      }\n    }\n  },\n  \"averageSpeedSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 44.2,\n        \"unit\": \"kilometers_per_hour\"\n      }\n    }\n  },\n  \"fuelDistanceLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 111000,\n        \"unit\": \"meters\"\n      }\n    }\n  },\n  \"fuelDistanceSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 222000,\n        \"unit\": \"meters\"\n      }\n    }\n  },\n  \"drivingDurationLastTrip\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 77,\n        \"unit\": \"minutes\"\n      }\n    }\n  },\n  \"drivingDurationSinceReset\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 88,\n        \"unit\": \"minutes\"\n      }\n    }\n  },\n  \"ecoScoreTotal\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7\n      }\n    }\n  },\n  \"ecoScoreFreeWheel\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7\n      }\n    }\n  },\n  \"ecoScoreConstant\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7\n      }\n    }\n  },\n  \"ecoScoreBonusRange\": {\n    \"timestamp\": \"2020-12-21T15:48:04.887Z\",\n    \"data\": {\n      \"value\": {\n        \"value\": 0.7,\n        \"unit\": \"kilometers\"\n      }\n    }\n  }\n}\n```"
    -
        title: 'getAvailability([, propertyNames])'
        id: get-availability
        children:
            -
                declaration: "```javascript\nhmkit.commands.Usage.getAvailability()\n```"
                parameters:
                    propertyNames: '(optional) Array of names of the properties you want returned.'
                example: "```javascript\n// Get availability for all properties\nhmkit.telematics.sendCommand(\n  hmkit.commands.Usage.getAvailability(),\n  accessCertificate\n);\n// Get availability for specific properties\nhmkit.telematics.sendCommand(\n  hmkit.commands.Usage.getAvailability(['average_weekly_distance']),\n  accessCertificate\n);\n```"
            -
                id: availability-response
                title: Response
                parameters:
                    availability:
                        updateRate.value: '(String) enum'
                        rateLimit.value: (Number)
                        rateLimit.unit: (String)
                        appliesPer.value: (String)
                discussion: 'The response contains an availability object for each property, as shown in the example'
                example: "```json\n{\n  \"average_weekly_distance\": {\n    \"availability\": {\n      \"updateRate\": {\n        \"value\": \"trip_high\"\n      },\n      \"rateLimit\": {\n        \"value\": 64,\n        \"unit\": \"hertz\"\n      },\n      \"appliesPer\": {\n        \"value\": \"vehicle\"\n      }\n    }\n  }\n}\n```"
